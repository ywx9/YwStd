/// \file cstddef
/// \copyright (c) 2022 ywx9.com

// clang-format off
#pragma once

#include "abc.hpp"

// All macros are defined in `abc.hpp`

#ifndef ywstd_import
ywstd_export namespace std {

using size_t = decltype(sizeof(0));
using ptrdiff_t = decltype((int*)0 - (int*)0);
using nullptr_t = decltype(nullptr);
using max_align_t = double;

enum class byte : unsigned char {};

template<typename Int> requires is_integral_v<Int>
[[nodiscard]] constexpr byte operator<<(const byte b, const Int s) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(b) << s));
}

template<typename Int> requires is_integral_v<Int>
[[nodiscard]] constexpr byte operator>>(const byte b, const Int s) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(b) >> s));
}

[[nodiscard]] constexpr byte operator|(const byte x, const byte y) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(x) | static_cast<unsigned int>(y)));
}

[[nodiscard]] constexpr byte operator&(const byte x, const byte y) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(x) & static_cast<unsigned int>(y)));
}

[[nodiscard]] constexpr byte operator^(const byte x, const byte y) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(x) ^ static_cast<unsigned int>(y)));
}

[[nodiscard]] constexpr byte operator~(const byte b) noexcept {
  return static_cast<byte>(static_cast<unsigned char>(~static_cast<unsigned int>(b)));
}

template<typename Int> requires is_integral_v<Int>
constexpr byte& operator<<=(byte& b, const Int s) noexcept { return b = b << s; }

template<typename Int> requires is_integral_v<Int>
constexpr byte& operator>>=(byte& b, const Int s) noexcept { return b = b >> s; }

constexpr byte& operator|=(byte& x, const byte y) noexcept { return x = x | y; }
constexpr byte& operator&=(byte& x, const byte y) noexcept { return x = x & y; }
constexpr byte& operator^=(byte& x, const byte y) noexcept { return x = x ^ y; }

template<typename Int> requires is_integral_v<Int>
[[nodiscard]] [[msvc::intrinsic]] constexpr Int to_integer(const byte b) noexcept {
  return static_cast<Int>(b);
}
}
#endif

#if ywstd_is_tested
// #include "print"
inline const bool cstddef_test = []{

  // offsetof

  struct Struct {
    int a;
    char b;
    double c;
  };

  std::print("offsetof(Struct{int, char, double}, a) = {}\n", offsetof(Struct, a));
  std::print("offsetof(Struct{int, char, double}, b) = {}\n", offsetof(Struct, b));
  std::print("offsetof(Struct{int, char, double}, c) = {}\n", offsetof(Struct, c));
}();
#endif
