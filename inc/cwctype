/// \file cwctype
/// \copyright (c) 2022 ywx9.com

#pragma once

#include "cwchar"

#if ywstd_is_exported
extern "C" {

using wctrans_t = wchar_t;

int __cdecl iswalnum(wint_t);
int __cdecl iswalpha(wint_t);
int __cdecl iswascii(wint_t);
int __cdecl iswblank(wint_t);
int __cdecl iswcntrl(wint_t);
int __cdecl iswdigit(wint_t);
int __cdecl iswgraph(wint_t);
int __cdecl iswlower(wint_t);
int __cdecl iswprint(wint_t);
int __cdecl iswpunct(wint_t);
int __cdecl iswspace(wint_t);
int __cdecl iswupper(wint_t);
int __cdecl iswxdigit(wint_t);
int __cdecl iswctype(wint_t, wctype_t);
wctype_t __cdecl wctype(const char*);

wint_t __cdecl towupper(wint_t);
wint_t __cdecl towlower(wint_t);
wint_t __cdecl towctrans(wint_t, wctrans_t);
wctrans_t __cdecl wctrans(const char*);
}
#endif

export namespace std {

using ::wctrans_t;
using ::wctype_t;
using ::wint_t;

inline int iswalnum(wint_t wc) { return ::iswalnum(wc); }
inline int iswalpha(wint_t wc) { return ::iswalpha(wc); }
inline int iswascii(wint_t wc) { return ::iswascii(wc); }
inline int iswblank(wint_t wc) { return ::iswblank(wc); }
inline int iswcntrl(wint_t wc) { return ::iswcntrl(wc); }
inline int iswdigit(wint_t wc) { return ::iswdigit(wc); }
inline int iswgraph(wint_t wc) { return ::iswgraph(wc); }
inline int iswlower(wint_t wc) { return ::iswlower(wc); }
inline int iswprint(wint_t wc) { return ::iswprint(wc); }
inline int iswpunct(wint_t wc) { return ::iswpunct(wc); }
inline int iswspace(wint_t wc) { return ::iswspace(wc); }
inline int iswupper(wint_t wc) { return ::iswupper(wc); }
inline int iswxdigit(wint_t wc) { return ::iswxdigit(wc); }
inline int iswctype(wint_t wc, wctype_t type) { return ::iswctype(wc, type); }
inline wctype_t wctype(const char* property) { return ::wctype(property); }

inline wint_t towupper(wint_t wc) { return ::towupper(wc); }
inline wint_t towlower(wint_t wc) { return ::towlower(wc); }
inline wint_t towctrans(wint_t wc, wctrans_t desc) { return ::towctrans(wc, desc); }
inline wctrans_t wctrans(const char* property) { return ::wctrans(property); }
}
