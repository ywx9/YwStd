/// \file cstdio
/// \copyright (c) 2022 ywx9.com

#pragma once

#include "corecrt_stdio_config.h"
#include "yvals_core.h"

#if ywstd_is_exported
extern "C" {

#define _IOFBF 0x0000
#define _IOLBF 0x0040
#define _IONBF 0x0004
#define BUFSIZ 512
#define EOF (-1)
#define FOPEN_MAX 20
#define FILENAME_MAX 260
#define L_tmpnam 260
#define SEEK_CUR 1
#define SEEK_END 2
#define SEEK_SET 0

using fpos_t = long long;

struct FILE {
  void* _Placeholder;
};

FILE* __cdecl fopen(const char*, const char*);
FILE* __cdecl freopen(const char*, const char*, FILE*);
int __cdecl fclose(FILE*);
int __cdecl fflush(FILE*);
void __cdecl setbuf(FILE*, char*);
int __cdecl setvbuf(FILE*, char*, int, size_t);

size_t __cdecl fread(void*, size_t, size_t, FILE*);
size_t __cdecl fwrite(const void*, size_t, size_t, FILE*);

int __cdecl getc(FILE*);
int __cdecl fgetc(FILE*);
char* __cdecl fgets(char*, int, FILE*);
int __cdecl putc(int, FILE*);
int __cdecl fputc(int, FILE*);
int __cdecl fputs(const char*, FILE*);
int __cdecl getchar();
int __cdecl putchar(int);
int __cdecl puts(const char* s);
int __cdecl ungetc(int, FILE*);

long __cdecl ftell(FILE*);
int __cdecl fgetpos(FILE*, fpos_t*);
int __cdecl fseek(FILE*, long, int);
int __cdecl fsetpos(FILE*, const fpos_t*);
void __cdecl rewind(FILE*);

void clearerr(FILE*);
int feof(FILE*);
int ferror(FILE*);
void perror(const char*);

int __cdecl remove(const char*);
int __cdecl rename(const char*, const char*);
FILE* __cdecl tmpfile();
char* __cdecl tmpnam(char*);

FILE* __cdecl __acrt_iob_func(unsigned);
int __cdecl __stdio_common_vfprintf(unsigned long long, FILE*, const char*, _locale_t, va_list);
int __cdecl __stdio_common_vsprintf(unsigned long long, char*, size_t, const char*, _locale_t, va_list);
int __cdecl __stdio_common_vfscanf(unsigned long long, FILE*, const char*, _locale_t, va_list);
int __cdecl __stdio_common_vsscanf(unsigned long long, const char*, size_t, const char*, _locale_t, va_list);
}

inline int __cdecl _scprintf(const char* Format, ...) {
  va_list Args;
  va_start(Args, Format);
  int Result = __stdio_common_vsprintf(                                                   //
    _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR, //
    nullptr, 0, Format, nullptr, Args);
  va_end(Args);
  return Result;
}

inline int __cdecl sprintf_s(char* Buffer, size_t Size, const char* Format, ...) {
  va_list Args;
  va_start(Args, Format);
  int Result = __stdio_common_vsprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, Buffer, Size, Format, nullptr, Args);
  va_end(Args);
  return Result;
}
#endif

#define stdin (__acrt_iob_func(0))
#define stdout (__acrt_iob_func(1))
#define stderr (__acrt_iob_func(2))

export namespace std {

using fpos_t = long long;

using ::FILE;

////////////////////////////////////////////////////////////////////////////////
// FILE ACCESS

inline FILE* fopen(const char* Filename, const char* Mode) { return ::fopen(Filename, Mode); }
inline FILE* freopen(const char* Filename, const char* Mode, FILE* Stream) { return ::freopen(Filename, Mode, Stream); }
inline int fclose(FILE* Stream) { return ::fclose(Stream); }
inline int fflush(FILE* Stream) { return ::fflush(Stream); }
inline void setbuf(FILE* Stream, char* Buffer) { ::setbuf(Stream, Buffer); }
inline int setvbuf(FILE* Stream, char* Buffer, int Mode, size_t Size) { return ::setvbuf(Stream, Buffer, Mode, Size); }

////////////////////////////////////////////////////////////////////////////////
// DIRECT INPUT/OUTPUT

inline size_t fread(void* Buffer, size_t Size, size_t Count, FILE* Stream) {
  return ::fread(Buffer, Size, Count, Stream);
}
inline size_t fwrite(const void* Buffer, size_t Size, size_t Count, FILE* Stream) {
  return ::fwrite(Buffer, Size, Count, Stream);
}

////////////////////////////////////////////////////////////////////////////////
// UNFORMATTED INPUT/OUTPUT

inline int getc(FILE* Stream) { return ::getc(Stream); }
inline int fgetc(FILE* Stream) { return ::fgetc(Stream); }
inline char* fgets(char* Buffer, int MaxCount, FILE* Stream) { return ::fgets(Buffer, MaxCount, Stream); }
inline int putc(int Character, FILE* Stream) { return ::putc(Character, Stream); }
inline int fputc(int Character, FILE* Stream) { return ::fputc(Character, Stream); }
inline int fputs(const char* String, FILE* Stream) { return ::fputs(String, Stream); }
inline int getchar() { return ::getchar(); }
inline int putchar(int Character) { return ::putchar(Character); }
inline int puts(const char* String) { return ::puts(String); }
inline int ungetc(int Character, FILE* Stream) { return ::ungetc(Character, Stream); }

////////////////////////////////////////////////////////////////////////////////
// FORMATTED INPUT/OUTPUT

inline int vfprintf(FILE* Stream, const char* Format, va_list Args) {
  return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, Stream, Format, nullptr, Args);
}
inline int vsprintf(char* Buffer, const char* Format, va_list Args) {
  return __stdio_common_vsprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, Buffer, (size_t)-1, Format, nullptr, Args);
}
inline int vprintf(const char* Format, va_list Args) { return vfprintf(stdout, Format, Args); }
inline int fprintf(FILE* Stream, const char* Format, ...) {
  va_list Args;
  va_start(Args, Format);
  int Result = vfprintf(Stream, Format, Args);
  va_end(Args);
  return Result;
}
inline int sprintf(char* Buffer, const char* Format, ...) {
  va_list Args;
  va_start(Args, Format);
  int Result = vsprintf(Buffer, Format, Args);
  va_end(Args);
  return Result;
}
inline int printf(const char* Format, ...) {
  va_list Args;
  va_start(Args, Format);
  int Result = vprintf(Format, Args);
  va_end(Args);
  return Result;
}
}
