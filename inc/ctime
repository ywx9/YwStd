/// \file ctime
/// \copyright (c) 2022 ywx9.com

#pragma once

#include "yvals_core.h"

#if ywstd_is_exported
extern "C" {

using clock_t = long;

struct tm {
  int tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday, tm_yday, tm_isdst;
};

struct timespec {
  time_t tv_sec;
  long tv_nsec;
};

clock_t __cdecl clock();
time_t __cdecl time(time_t*);
double __cdecl difftime(time_t, time_t);
int __cdecl timespec_get(timespec*, int);

char* __cdecl ctime(const time_t*);
char* __cdecl asctime(const tm*);
size_t __cdecl strftime(char*, size_t, const char*, const tm*);
tm* __cdecl gmtime(const time_t*);
tm* __cdecl localtime(const time_t*);
time_t __cdecl mktime(tm*);
}
#endif

export namespace std {

////////////////////////////////////////////////////////////////////////////////
// TIME MANIPULATION

inline clock_t clock() { return ::clock(); }
inline time_t time(time_t* Time) { return ::time(Time); }
inline double difftime(time_t Time1, time_t Time2) { return ::difftime(Time1, Time2); }
inline int timespec_get(timespec* ts, int Base) { return ::timespec_get(ts, Base); }

////////////////////////////////////////////////////////////////////////////////
// FORMAT CONVERSION

inline char* ctime(const time_t* Time) { return ::ctime(Time); }
inline char* asctime(const tm* Time) { return ::asctime(Time); }
inline size_t strftime(char* Str, size_t Size, const char* Format, const tm* Time) { return ::strftime(Str, Size, Format, Time); }
inline tm* gmtime(const time_t* Time) { return ::gmtime(Time); }
inline tm* localtime(const time_t* Time) { return ::localtime(Time); }
inline time_t mktime(tm* Time) { return ::mktime(Time); }
}
