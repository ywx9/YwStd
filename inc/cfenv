/// \file cfenv
/// \copyright (c) 2022 ywx9.com

#pragma once

#include "corecrt.h"

#if ywstd_is_exported
extern "C" {

#define FE_INEXACT 0x01
#define FE_UNDERFLOW 0x02
#define FE_OVERFLOW 0x04
#define FE_DIVBYZERO 0x08
#define FE_INVALID 0x10
#define FE_ALL_EXCEPT 0x1f

#define FE_TONEAREST 0x0000
#define FE_DOWNWARD 0x0100
#define FE_UPWARD 0x0200
#define FE_TOWARDZERO 0x0300

#define FE_DFL_ENV (&_Fenv1)

using fexcept_t = unsigned long;
struct fenv_t {
  unsigned long _Fe_ctl, _Fe_stat;
};
__declspec(selectany) extern const fenv_t _Fenv1 = {0x3f00003f, 0};

int __cdecl fegetenv(fenv_t*);
int __cdecl fesetenv(const fenv_t*);
int __cdecl feclearexcept(int);
int __cdecl feholdexcept(fenv_t*);
int __cdecl fetestexcept(int);
int __cdecl fegetexceptflag(fexcept_t*, int);
int __cdecl fesetexceptflag(const fexcept_t*, int);

#if !defined(_BEGIN_PRAGMA_OPTIMIZE_DISABLE)
#define _BEGIN_PRAGMA_OPTIMIZE_DISABLE(flags, bug, reason) __pragma(optimize(flags, off))
#define _BEGIN_PRAGMA_OPTIMIZE_ENABLE(flags, bug, reason) __pragma(optimize(flags, on))
#define _END_PRAGMA_OPTIMIZE() __pragma(optimize("", on))
#endif
_BEGIN_PRAGMA_OPTIMIZE_DISABLE("", MSFT : 4499495,
                               "If optimizations are on, the floating-point exception might not get triggered (because "
                               "the compiler optimizes it out), breaking the function.")
inline int __cdecl feraiseexcept(int Except) {
  static struct {
    int Except_Val;
    double _Num, _Denom;
  } const _Table[] = {{FE_INVALID, 0.0, 0.0},
                      {FE_DIVBYZERO, 1.0, 0.0},
                      {FE_OVERFLOW, 1e+300, 1e-300},
                      {FE_UNDERFLOW, 1e-300, 1e+300},
                      {FE_INEXACT, 2.0, 3.0}};

  double _Ans = 0.0;
  (void)_Ans;
  size_t _Index;
  if ((Except &= FE_ALL_EXCEPT) == 0) { return 0; }
  for (_Index = 0; _Index < sizeof(_Table) / sizeof(_Table[0]); ++_Index) {
    if ((Except & _Table[_Index].Except_Val) != 0) {
      _Ans = _Table[_Index]._Num / _Table[_Index]._Denom;
#if defined _M_IX86 && _M_IX86_FP == 0 && !defined _M_HYBRID_X86_ARM64
      __asm fwait;
#endif
    }
  }
  return 0;
}
_END_PRAGMA_OPTIMIZE()

inline int __cdecl feupdateenv(const fenv_t* fe) {
  int Except = fetestexcept(FE_ALL_EXCEPT);
  if (fesetenv(fe) != 0 || feraiseexcept(Except) != 0) { return 1; }
  return 0;
}
}
#endif

export namespace std {

using ::fenv_t;
using ::fexcept_t;

using ::feclearexcept;
using ::fegetenv;
using ::fegetexceptflag;
using ::feholdexcept;
using ::feraiseexcept;
using ::fesetenv;
using ::fesetexceptflag;
using ::fetestexcept;
using ::feupdateenv;
}
