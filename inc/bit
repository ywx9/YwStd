/// \file bit
/// \copyright (c) 2022 ywx9.com

#pragma once

#include "type_traits"

////////////////////////////////////////////////////////////////////////////////
// BITCAST

namespace std {
export template<typename T, typename U>
requires (sizeof(T) == sizeof(U)) && is_trivially_copyable_v<T> && is_trivially_copyable_v<U>
[[nodiscard]] constexpr T bit_cast(const U& v) noexcept {
  return __builtin_bit_cast(T, v);
}
}

////////////////////////////////////////////////////////////////////////////////
// BYTESWAP

#if ywstd_is_exported
extern "C" {
unsigned short __cdecl _byteswap_ushort(unsigned short);
unsigned long __cdecl _byteswap_ulong(unsigned long);
unsigned long long __cdecl _byteswap_uint64(unsigned long long);
}
#endif
namespace std {
export template<typename T> requires is_integral_v<T> [[nodiscard]]
constexpr T byteswap(const T v) noexcept {
  if constexpr (sizeof(T) == 1) return v;
  else if constexpr (sizeof(T) == 2) {
    auto n = static_cast<unsigned short>(v);
    if (!std::is_constant_evaluated()) return static_cast<T>(::_byteswap_ushort(n));
    return static_cast<T>((n << 8) | (n >> 8));
  } else if constexpr (sizeof(T) == 4) {
    auto n = static_cast<unsigned long>(v);
    if (!std::is_constant_evaluated()) return static_cast<T>(::_byteswap_ulong(n));
    return static_cast<T>((n << 24) | ((n << 8) & 0x00FF0000) | ((n >> 8) & 0x0000FF00) | (n >> 24));
  } else {
    auto n = static_cast<unsigned long long>(v);
    if (!std::is_constant_evaluated()) return static_cast<T>(::_byteswap_uint64(n));
    return static_cast<T>((n << 56) | ((n << 40) & 0x00FF'0000'0000'0000) | ((n << 24) & 0x0000'FF00'0000'0000) |
                          ((n << 8) & 0x0000'00FF'0000'0000) | ((n >> 8) & 0x0000'0000'FF00'0000) |
                          ((n >> 24) & 0x0000'0000'00FF'0000) | ((n >> 40) & 0x0000'0000'0000'FF00) | (n >> 56));
  }
}
}

#include "__msvc_bit_utils.hpp"
#include "cstdlib"

#include "intrin0.h"

_STD_BEGIN

template<class _Ty> concept _Standard_unsigned_integral = _Is_standard_unsigned_integer<_Ty>;

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr int countl_zero(_Ty _Val) noexcept;

_EXPORT_STD template<_Standard_unsigned_integral _Ty>
_NODISCARD constexpr bool has_single_bit(const _Ty _Val) noexcept {
  return _Val != 0 && (_Val & (_Val - 1)) == 0;
}

inline void _Precondition_violation_in_bit_ceil() noexcept {}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr _Ty bit_ceil(const _Ty _Val) noexcept
/* strengthened */ {
  if (_Val <= 1u) { return _Ty{1}; }

  const int _Num = _Unsigned_integer_digits<_Ty> - _STD countl_zero(static_cast<_Ty>(_Val - 1));

  if constexpr (sizeof(_Ty) < sizeof(unsigned int)) { // for types subject to integral promotion
    if (_STD is_constant_evaluated()) {
      // Because N4950 [expr.shift]/1 "integral promotions are performed"
      // the compiler will not generate a compile time error for
      // uint8_t{1} << 8
      // or
      // uint16_t{1} << 16
      // so we must manually enforce N4950 [bit.pow.two]/5, 8:
      // "Preconditions: N is representable as a value of type T."
      // "Remarks: A function call expression that violates the precondition in the Preconditions: element
      // is not a core constant expression (7.7)."
      if (_Num == _Unsigned_integer_digits<_Ty>) { _Precondition_violation_in_bit_ceil(); }
    }
  }

  return static_cast<_Ty>(_Ty{1} << _Num);
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr _Ty bit_floor(const _Ty _Val) noexcept {
  if (_Val == 0) { return 0; }

  return static_cast<_Ty>(_Ty{1} << (_Unsigned_integer_digits<_Ty> - 1 - _STD countl_zero(_Val)));
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr int bit_width(const _Ty _Val) noexcept {
  return _Unsigned_integer_digits<_Ty> - _STD countl_zero(_Val);
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr _Ty rotr(_Ty _Val, int _Rotation) noexcept;

_EXPORT_STD template<_Standard_unsigned_integral _Ty>
_NODISCARD constexpr _Ty rotl(const _Ty _Val, const int _Rotation) noexcept {
  constexpr auto _Digits = _Unsigned_integer_digits<_Ty>;

  if (!_STD is_constant_evaluated()) {
    if constexpr (_Digits == 64) {
      return _rotl64(_Val, _Rotation);
    } else if constexpr (_Digits == 32) {
      return _rotl(_Val, _Rotation);
    } else if constexpr (_Digits == 16) {
      return _rotl16(_Val, static_cast<unsigned char>(_Rotation));
    } else {
      _STL_INTERNAL_STATIC_ASSERT(_Digits == 8);
      return _rotl8(_Val, static_cast<unsigned char>(_Rotation));
    }
  }

  const auto _Remainder = _Rotation % _Digits;
  if (_Remainder > 0) {
    return static_cast<_Ty>(static_cast<_Ty>(_Val << _Remainder) | static_cast<_Ty>(_Val >> (_Digits - _Remainder)));
  } else if (_Remainder == 0) {
    return _Val;
  } else { // _Remainder < 0
    return _STD rotr(_Val, -_Remainder);
  }
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty>
_NODISCARD constexpr _Ty rotr(const _Ty _Val, const int _Rotation) noexcept {
  constexpr auto _Digits = _Unsigned_integer_digits<_Ty>;

  if (!_STD is_constant_evaluated()) {
    if constexpr (_Digits == 64) {
      return _rotr64(_Val, _Rotation);
    } else if constexpr (_Digits == 32) {
      return _rotr(_Val, _Rotation);
    } else if constexpr (_Digits == 16) {
      return _rotr16(_Val, static_cast<unsigned char>(_Rotation));
    } else {
      _STL_INTERNAL_STATIC_ASSERT(_Digits == 8);
      return _rotr8(_Val, static_cast<unsigned char>(_Rotation));
    }
  }

  const auto _Remainder = _Rotation % _Digits;
  if (_Remainder > 0) {
    return static_cast<_Ty>(static_cast<_Ty>(_Val >> _Remainder) | static_cast<_Ty>(_Val << (_Digits - _Remainder)));
  } else if (_Remainder == 0) {
    return _Val;
  } else { // _Remainder < 0
    return _STD rotl(_Val, -_Remainder);
  }
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr int countl_zero(const _Ty _Val) noexcept {
#if _HAS_COUNTL_ZERO_INTRINSICS
#if (defined(_M_IX86) && !defined(_M_HYBRID_X86_ARM64)) || (defined(_M_X64) && !defined(_M_ARM64EC))
  if (!_STD is_constant_evaluated()) { return _Checked_x86_x64_countl_zero(_Val); }
#elif defined(_M_ARM) || defined(_M_ARM64) || defined(_M_ARM64EC) || defined(_M_HYBRID_X86_ARM64)
  if (!_STD is_constant_evaluated()) { return _Checked_arm_arm64_countl_zero(_Val); }
#endif // defined(_M_ARM) || defined(_M_ARM64) || defined(_M_ARM64EC) || defined(_M_HYBRID_X86_ARM64)
#endif // _HAS_COUNTL_ZERO_INTRINSICS

  return _Countl_zero_fallback(_Val);
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr int countl_one(const _Ty _Val) noexcept {
  return _STD countl_zero(static_cast<_Ty>(~_Val));
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr int countr_zero(const _Ty _Val) noexcept {
  return _Countr_zero(_Val);
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr int countr_one(const _Ty _Val) noexcept {
  return _Countr_zero(static_cast<_Ty>(~_Val));
}

_EXPORT_STD template<_Standard_unsigned_integral _Ty> _NODISCARD constexpr int popcount(const _Ty _Val) noexcept {
  return _Popcount(_Val);
}

_EXPORT_STD enum class endian { little = 0, big = 1, native = little };

_STD_END
