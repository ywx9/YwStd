/// \file cstdint
// cstdint standard header (core)

// Copyright (c) Microsoft Corporation.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef _CSTDINT_
#define _CSTDINT_
#include "yvals_core.h"
#if _STL_COMPILER_PREPROCESSOR

typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;

typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long intmax_t;
typedef unsigned long long uintmax_t;

// These macros must exactly match those in the Windows SDK's intsafe.h.
#define INT8_MIN (-127i8 - 1)
#define INT16_MIN (-32767i16 - 1)
#define INT32_MIN (-2147483647i32 - 1)
#define INT64_MIN (-9223372036854775807i64 - 1)
#define INT8_MAX 127i8
#define INT16_MAX 32767i16
#define INT32_MAX 2147483647i32
#define INT64_MAX 9223372036854775807i64
#define UINT8_MAX 0xffui8
#define UINT16_MAX 0xffffui16
#define UINT32_MAX 0xffffffffui32
#define UINT64_MAX 0xffffffffffffffffui64

#define INT_LEAST8_MIN INT8_MIN
#define INT_LEAST16_MIN INT16_MIN
#define INT_LEAST32_MIN INT32_MIN
#define INT_LEAST64_MIN INT64_MIN
#define INT_LEAST8_MAX INT8_MAX
#define INT_LEAST16_MAX INT16_MAX
#define INT_LEAST32_MAX INT32_MAX
#define INT_LEAST64_MAX INT64_MAX
#define UINT_LEAST8_MAX UINT8_MAX
#define UINT_LEAST16_MAX UINT16_MAX
#define UINT_LEAST32_MAX UINT32_MAX
#define UINT_LEAST64_MAX UINT64_MAX

#define INT_FAST8_MIN INT8_MIN
#define INT_FAST16_MIN INT32_MIN
#define INT_FAST32_MIN INT32_MIN
#define INT_FAST64_MIN INT64_MIN
#define INT_FAST8_MAX INT8_MAX
#define INT_FAST16_MAX INT32_MAX
#define INT_FAST32_MAX INT32_MAX
#define INT_FAST64_MAX INT64_MAX
#define UINT_FAST8_MAX UINT8_MAX
#define UINT_FAST16_MAX UINT32_MAX
#define UINT_FAST32_MAX UINT32_MAX
#define UINT_FAST64_MAX UINT64_MAX

#ifdef _WIN64
#define INTPTR_MIN INT64_MIN
#define INTPTR_MAX INT64_MAX
#define UINTPTR_MAX UINT64_MAX
#else
#define INTPTR_MIN INT32_MIN
#define INTPTR_MAX INT32_MAX
#define UINTPTR_MAX UINT32_MAX
#endif

#define INTMAX_MIN INT64_MIN
#define INTMAX_MAX INT64_MAX
#define UINTMAX_MAX UINT64_MAX

#define PTRDIFF_MIN INTPTR_MIN
#define PTRDIFF_MAX INTPTR_MAX

#ifndef SIZE_MAX
// SIZE_MAX definition must match exactly with limits.h for modules support.
#ifdef _WIN64
#define SIZE_MAX 0xffffffffffffffffui64
#else
#define SIZE_MAX 0xffffffffui32
#endif
#endif

#define SIG_ATOMIC_MIN INT32_MIN
#define SIG_ATOMIC_MAX INT32_MAX

#define WCHAR_MIN 0x0000
#define WCHAR_MAX 0xffff

#define WINT_MIN 0x0000
#define WINT_MAX 0xffff

#define INT8_C(x) (x)
#define INT16_C(x) (x)
#define INT32_C(x) (x)
#define INT64_C(x) (x##LL)

#define UINT8_C(x) (x)
#define UINT16_C(x) (x)
#define UINT32_C(x) (x##U)
#define UINT64_C(x) (x##ULL)

#define INTMAX_C(x) INT64_C(x)
#define UINTMAX_C(x) UINT64_C(x)

#pragma pack(push, _CRT_PACKING)
#pragma warning(push, _STL_WARNING_LEVEL)
#pragma warning(disable : _STL_DISABLED_WARNINGS)
_STL_DISABLE_CLANG_WARNINGS
#pragma push_macro("new")
#undef new

_STD_BEGIN
_EXPORT_STD using _CSTD int8_t;
_EXPORT_STD using _CSTD int16_t;
_EXPORT_STD using _CSTD int32_t;
_EXPORT_STD using _CSTD int64_t;
_EXPORT_STD using _CSTD uint8_t;
_EXPORT_STD using _CSTD uint16_t;
_EXPORT_STD using _CSTD uint32_t;
_EXPORT_STD using _CSTD uint64_t;

_EXPORT_STD using _CSTD int_least8_t;
_EXPORT_STD using _CSTD int_least16_t;
_EXPORT_STD using _CSTD int_least32_t;
_EXPORT_STD using _CSTD int_least64_t;
_EXPORT_STD using _CSTD uint_least8_t;
_EXPORT_STD using _CSTD uint_least16_t;
_EXPORT_STD using _CSTD uint_least32_t;
_EXPORT_STD using _CSTD uint_least64_t;

_EXPORT_STD using _CSTD int_fast8_t;
_EXPORT_STD using _CSTD int_fast16_t;
_EXPORT_STD using _CSTD int_fast32_t;
_EXPORT_STD using _CSTD int_fast64_t;
_EXPORT_STD using _CSTD uint_fast8_t;
_EXPORT_STD using _CSTD uint_fast16_t;
_EXPORT_STD using _CSTD uint_fast32_t;
_EXPORT_STD using _CSTD uint_fast64_t;

_EXPORT_STD using _CSTD intmax_t;
_EXPORT_STD using _CSTD intptr_t;
_EXPORT_STD using _CSTD uintmax_t;
_EXPORT_STD using _CSTD uintptr_t;

#if _HAS_TR1_NAMESPACE
namespace _DEPRECATE_TR1_NAMESPACE tr1 {
using _CSTD int8_t;
using _CSTD int16_t;
using _CSTD int32_t;
using _CSTD int64_t;
using _CSTD uint8_t;
using _CSTD uint16_t;
using _CSTD uint32_t;
using _CSTD uint64_t;

using _CSTD int_least8_t;
using _CSTD int_least16_t;
using _CSTD int_least32_t;
using _CSTD int_least64_t;
using _CSTD uint_least8_t;
using _CSTD uint_least16_t;
using _CSTD uint_least32_t;
using _CSTD uint_least64_t;

using _CSTD int_fast8_t;
using _CSTD int_fast16_t;
using _CSTD int_fast32_t;
using _CSTD int_fast64_t;
using _CSTD uint_fast8_t;
using _CSTD uint_fast16_t;
using _CSTD uint_fast32_t;
using _CSTD uint_fast64_t;

using _CSTD intmax_t;
using _CSTD intptr_t;
using _CSTD uintmax_t;
using _CSTD uintptr_t;
} // namespace _DEPRECATE_TR1_NAMESPACE tr1
#endif // _HAS_TR1_NAMESPACE
_STD_END

#pragma pop_macro("new")
_STL_RESTORE_CLANG_WARNINGS
#pragma warning(pop)
#pragma pack(pop)

#endif // _STL_COMPILER_PREPROCESSOR
#endif // _CSTDINT_
