/// \file cstdio
/// \copyright (c) 2022 ywx9.com

// clang-format off
#pragma once

#include "abc.hpp"

// All macros are defined in `abc.hpp`

#ifndef ywstd_import
ywstd_export namespace std {

using size_t = decltype(sizeof(0));

inline FILE* __cdecl fopen(const char* filename, const char* mode) { return ::fopen(filename, mode); }
inline FILE* __cdecl freopen(const char* filename, const char* mode, FILE* stream) { return ::freopen(filename, mode, stream); }
inline int __cdecl fclose(FILE* stream) { return ::fclose(stream); }
inline int __cdecl fflush(FILE* stream) { return ::fflush(stream); }
inline void __cdecl setbuf(FILE* stream, char* buffer) { ::setbuf(stream, buffer); }
inline int __cdecl setvbuf(FILE* stream, char* buffer, int mode, size_t size) { return ::setvbuf(stream, buffer, mode, size); }

inline size_t __cdecl fread(void* buffer, size_t size, size_t count, FILE* stream) { return ::fread(buffer, size, count, stream); }
inline size_t __cdecl fwrite(const void* buffer, size_t size, size_t count, FILE* stream) { return ::fwrite(buffer, size, count, stream); }

inline int __cdecl getc(FILE* stream) { return ::getc(stream); }
inline int __cdecl fgetc(FILE* stream) { return ::fgetc(stream); }
inline char* __cdecl fgets(char* buffer, int count, FILE* stream) { return ::fgets(buffer, count, stream); }
inline int __cdecl putc(int character, FILE* stream) { return ::putc(character, stream); }
inline int __cdecl fputc(int character, FILE* stream) { return ::fputc(character, stream); }
inline int __cdecl fputs(const char* string, FILE* stream) { return ::fputs(string, stream); }
inline int __cdecl getchar() { return ::getchar(); }
inline int __cdecl putchar(int character) { return ::putchar(character); }
inline int __cdecl puts(const char* string) { return ::puts(string); }
inline int __cdecl ungetc(int character, FILE* stream) { return ::ungetc(character, stream); }

inline long __cdecl ftell(FILE* stream) { return ::ftell(stream); }
inline int __cdecl fgetpos(FILE* stream, fpos_t* position) { return ::fgetpos(stream, position); }
inline int __cdecl fseek(FILE* stream, long int offset, int origin) { return ::fseek(stream, offset, origin); }
inline int __cdecl fsetpos(FILE* stream, const fpos_t* position) { return ::fsetpos(stream, position); }
inline void __cdecl rewind(FILE* stream) { ::rewind(stream); }

inline void __cdecl clearerr(FILE* stream) { ::clearerr(stream); }
inline int __cdecl feof(FILE* stream) { return ::feof(stream); }
inline int __cdecl ferror(FILE* stream) { return ::ferror(stream); }
inline void __cdecl perror(const char* message) { ::perror(message); }

inline int __cdecl remove(const char* filename) { return ::remove(filename); }
inline int __cdecl rename(const char * oldname, const char* newname) { return ::rename(oldname, newname); }
inline FILE* __cdecl tmpfile() { return ::tmpfile(); }
inline char* __cdecl tmpnam(char* buffer) { return ::tmpnam(buffer); }

/// std::vsnprintf
inline int __cdecl vsnprintf(char* buffer, size_t count, const char* format, va_list arg) {
  return ::vsnprintf(buffer, count, format, arg);
}

/// std::vsprintf
inline int __cdecl vsprintf(char* buffer, const char* format, va_list arg) {
  return std::vsnprintf(buffer, size_t(-1), format, arg);
}

/// std::vfprintf
inline int __cdecl vfprintf(FILE* stream, const char* format, va_list arg) {
  return ::vfprintf(stream, format, arg);
}

/// std::vprintf
inline int __cdecl vprintf(const char* format, va_list arg) {
  return std::vfprintf(stdout, format, arg);
}

/// std::snprintf
ywstd_export inline int __cdecl snprintf(char* buffer, size_t count, const char* format, ...) {
  va_list args;
  va_start(args, format);
  int result = std::vsnprintf(buffer, count, format, args);
  va_end(args);
  return result;
}

/// std::sprintf
ywstd_export inline int __cdecl sprintf(char* buffer, const char* format, ...) {
  va_list args;
  va_start(args, format);
  int result = std::vsprintf(buffer, format, args);
  va_end(args);
  return result;
}

/// std::fprintf
ywstd_export inline int __cdecl fprintf(FILE* stream, const char* format, ...) {
  va_list args;
  va_start(args, format);
  int result = std::vfprintf(stream, format, args);
  va_end(args);
  return result;
}

/// std::printf
ywstd_export inline int __cdecl printf(const char* format, ...) {
  va_list args;
  va_start(args, format);
  int result = std::vfprintf(stdout, format, args);
  va_end(args);
  return result;
}

/// std::vsscanf
inline int __cdecl vsscanf(const char* buffer, const char* format, va_list arg) {
  return ::vsscanf(buffer, format, arg);
}

/// std::vfscanf
inline int __cdecl vfscanf(FILE* stream, const char* format, va_list arg) {
  return ::vfscanf(stream, format, arg);
}

/// std::sscanf
ywstd_export inline int __cdecl sscanf(const char* buffer, const char* format, ...) {
  va_list args;
  va_start(args, format);
  int result = std::vsscanf(buffer, format, args);
  va_end(args);
  return result;
}

/// std::fscanf
ywstd_export inline int __cdecl fscanf(FILE* stream, const char* format, ...) {
  va_list args;
  va_start(args, format);
  int result = std::vfscanf(stream, format, args);
  va_end(args);
  return result;
}

/// std::scanf
ywstd_export inline int __cdecl scanf(const char* format, ...) {
  va_list args;
  va_start(args, format);
  int result = std::vfscanf(stdin, format, args);
  va_end(args);
  return result;
}
}
#endif
