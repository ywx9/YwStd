/// \file cfenv
/// \copyright (c) 2022 ywx9.com

// clang-format off
#pragma once

#include "abc.hpp"

// All macros are defined in `abc.hpp`

#if ywstd_is_exported
extern "C" {
__pragma(optimize("", off)) inline int __cdecl feraiseexcept(int except) {
  static struct { int except; double num, den; } const table[] =
    {{FE_INVALID, 0.0, 0.0}, {FE_DIVBYZERO, 1.0, 0.0}, {FE_OVERFLOW, 1e+300, 1e-300},
     {FE_UNDERFLOW, 1e-300, 1e+300}, {FE_INEXACT, 2.0, 3.0}};
  double ans = 0.0; (void) ans;
  if ((except &= FE_ALL_EXCEPT) == 0) return 0;
  for (size_t i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
    if ((except & table[i].except) != 0) {
      ans = table[i].num / table[i].den;
      #if defined _M_IX86 && _M_IX86_FP == 0 && !defined _M_HYBRID_X86_ARM64
      __asm fwait;
      #endif
    }
  }
}
__pragma(optimize("", on))
inline int __cdecl feupdateenv(const fenv_t* fe) {
  if (::fesetenv(fe) != 0) return 1;
  else if (int e = ::fetestexcept(FE_ALL_EXCEPT); ::feraiseexcept(e) != 0) return 1;
  else return 0;
}
}
#endif

ywstd_export namespace std {

/// represents all floating-point status flags collectively
using fexcept_t = unsigned long;

/// clears the specified floating-point status flags
ywstd_export inline int __cdecl feclearexcept(int except) { return ::feclearexcept(except); }

/// determines which of the specified floating-point status flags are set
ywstd_export inline int __cdecl fetestexcept(int except) { return ::fetestexcept(except); }

/// raises the specified floating-point exceptions
ywstd_export inline int __cdecl feraiseexcept(int except) { return ::feraiseexcept(except); }

/// copies the state of the specified floating-point status flags from the floating-point environment
ywstd_export inline int __cdecl fegetexceptflag(fexcept_t* flag, int except) {return ::fegetexceptflag(flag, except); }

/// copies the state of the specified floating-point status flags to the floating-point environment
ywstd_export inline int __cdecl fesetexceptflag(const fexcept_t* flag, int except) { return ::fesetexceptflag(flag, except); }

/// gets rounding direction
ywstd_export inline int __cdecl fegetround() { return ::fegetround(); }

/// sets rounding direction
ywstd_export inline int __cdecl fesetround(int mode) { return ::fesetround(mode); }

/// saves the current floating-point environment
ywstd_export inline int __cdecl fegetenv(fenv_t* env) { return ::fegetenv(env); }

/// installs the floating-point environment
ywstd_export inline int __cdecl fesetenv(const fenv_t* env) { return ::fesetenv(env); }

/// saves the environment, clears all status flags and ignores all future errors
ywstd_export inline int __cdecl feholdexcept(fenv_t* env) { return ::feholdexcept(env); }

/// restores the floating-point environment and raises the previously raised exceptions
ywstd_export inline int __cdecl feupdateenv(const fenv_t* env) { return ::feupdateenv(env); }
}
