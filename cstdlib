/// \file cstdlib
/// \copyright (c) 2022 ywx9.com

// clang-format off
#pragma once

#include "abc.hpp"

#ifndef ywstd_import
ywstd_export namespace std {

constexpr int __cdecl abs(int x) {
  if (!__builtin_is_constant_evaluated()) return ::abs(x);
  else return x < 0 ? -x : x;
}
constexpr long __cdecl labs(long x) {
  if (!__builtin_is_constant_evaluated()) return ::labs(x);
  else return x < 0 ? -x : x;
}
constexpr long long __cdecl llabs(long long x) {
  if (!__builtin_is_constant_evaluated()) return ::llabs(x);
  else return x < 0 ? -x : x;
}
constexpr long __cdecl abs(long x) { return std::labs(x); }
constexpr long long __cdecl abs(long long x) { return std::llabs(x); }
constexpr float __cdecl abs(float x) {
  if (!__builtin_is_constant_evaluated()) return ::fabsf(x);
  else return x < 0 ? -x : x;
}
constexpr double __cdecl abs(double x) {
  if (!__builtin_is_constant_evaluated()) return ::fabs(x);
  else return x < 0 ? -x : x;
}
constexpr long double __cdecl abs(long double x) {
  if (!__builtin_is_constant_evaluated()) return ::fabsl(x);
  else return x < 0 ? -x : x;
}

constexpr div_t __cdecl div(int num, int den) {
  if (!__builtin_is_constant_evaluated()) return ::div(num, den);
  else return {num / den, num % den};
}
constexpr ldiv_t __cdecl ldiv(long num, long den) {
  if (!__builtin_is_constant_evaluated()) return ::ldiv(num, den);
  else return {num / den, num % den};
}
constexpr lldiv_t __cdecl lldiv(long long num, long long den) {
  if (!__builtin_is_constant_evaluated()) return ::lldiv(num, den);
  else return {num / den, num % den};
}
constexpr ldiv_t __cdecl div(long num, long den) { return std::ldiv(num, den); }
constexpr lldiv_t __cdecl div(long long num, long long den) { return std::lldiv(num, den); }

[[noreturn]] inline void __cdecl abort() { ::abort(); }
[[noreturn]] inline void __cdecl exit(int status) { ::exit(status); }
[[noreturn]] inline void __cdecl _Exit(int status) { ::_Exit(status); }
[[noreturn]] inline void __cdecl quick_exit(int status) { ::quick_exit(status); }

inline int __cdecl atexit(atexit_handler* func) { return ::atexit(func); }
inline int __cdecl at_quick_exit(atexit_handler* func) { return ::at_quick_exit(func); }

inline char* __cdecl getenv(const char* name) { return ::getenv(name); }
inline int __cdecl system(const char* command) { return ::system(command); }

inline void __cdecl free(void* ptr) { ::free(ptr); }
inline __declspec(restrict) void* __cdecl malloc(size_t size) { return ::malloc(size); }
inline __declspec(restrict) void* __cdecl calloc(size_t num, size_t size) { return ::calloc(num, size); }
inline __declspec(restrict) void* __cdecl realloc(void* ptr, size_t size) { return ::realloc(ptr, size); }

inline void __cdecl srand(unsigned seed) { ::srand(seed); }
inline int __cdecl rand() { return ::rand(); }

inline void __cdecl qsort(void* base, size_t num, size_t size, compare_pred* compare) { ::qsort(base, num, size, compare); }
inline void* __cdecl bsearch(const void* key, const void* base, size_t num, size_t size, compare_pred* compare) { return ::bsearch(key, base, num, size, compare); }

inline int __cdecl mblen(const char* s, size_t n) { return ::mblen(s, n); }
inline int __cdecl mbtowc(wchar_t* pwc, const char* s, size_t n) { return ::mbtowc(pwc, s, n); }
inline int __cdecl wctomb(char* s, wchar_t wc) { return ::wctomb(s, wc); }
inline size_t __cdecl mbstowcs(wchar_t* pwcs, const char* s, size_t n) { return ::mbstowcs(pwcs, s, n); }
inline size_t __cdecl wcstombs(char* s, const wchar_t* pwcs, size_t n) { return ::wcstombs(s, pwcs, n); }

inline int __cdecl atoi(const char* s) { return ::atoi(s); }
inline long __cdecl atol(const char* s) { return ::atol(s); }
inline long long __cdecl atoll(const char* s) { return ::atoll(s); }
inline double __cdecl atof(const char* s) { return ::atof(s); }

inline long __cdecl strtol(const char* s, char** end, int base) { return ::strtol(s, end, base); }
inline long long __cdecl strtoll(const char* s, char** end, int base) { return ::strtoll(s, end, base); }
inline unsigned long __cdecl strtoul(const char* s, char** end, int base) { return ::strtoul(s, end, base); }
inline unsigned long long __cdecl strtoull(const char* s, char** end, int base) { return ::strtoull(s, end, base); }
inline float __cdecl strtof(const char* s, char** end) { return ::strtof(s, end); }
inline double __cdecl strtod(const char* s, char** end) { return ::strtod(s, end); }
inline long double __cdecl strtold(const char* s, char** end) { return ::strtold(s, end); }
}
#endif
