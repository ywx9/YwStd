#pragma once /* clang-format off */ /* Python code start
import os, sys, subprocess
if len(sys.argv) > 1 :
  cpp_file = sys.argv[1]
  if (os.path.splitext(cpp_file)[1] != ".cpp"):
    print("Usage: python ywstd [<cpp_file> [--run]]")
  if (not os.path.exists(cpp_file)):
    print(f"{cpp_file} not found:")
    sys.exit(1)
  exe_file = cpp_file.replace(".cpp", ".exe")
  obj_file = cpp_file.replace(".cpp", ".obj")
  if os.path.exists(exe_file): os.remove(exe_file)
  if os.path.exists(obj_file): os.remove(obj_file)
  args = ["bin\\cl", cpp_file, f"/Fe{exe_file}", f"/Fo{obj_file}", "/Dywstd_import", ]
  args+= ["/std:c++latest", "/EHsc", "/nologo", "/W4", "/O2", "/Qpar", "/utf-8", ]
  args+= ["/link", "ywstd.obj", "/LIBPATH:lib", ]
  subprocess.run(args)
  if os.path.exists(obj_file): os.remove(obj_file)
  if os.path.exists(exe_file):
    print(f"{exe_file} compiled successfully.")
    if "--run" in sys.argv:
      print(f"Running {exe_file}...")
      subprocess.run([exe_file])
    sys.exit(0)
  else:
    print(f"Failed to compile {cpp_file}.")
    sys.exit(1)
else:
  print("Compiling ywstd...")
  # create ywstd.ixx
  args = ["bin\\cl", "ywstd.ixx", "/c", "/Dywstd_export=export", ]
  args+= ["/std:c++latest", "/EHsc", "/nologo", "/W4", "/O2", "/Qpar", "/utf-8", ]
  if os.path.exists("ywstd.ifc"): os.remove("ywstd.ifc")
  if os.path.exists("ywstd.obj"): os.remove("ywstd.obj")
  with open("ywstd.ixx", "w") as f:
    f.write("export module ywstd;\n#include \"ywstd\"\n")
  subprocess.run(args)
  if os.path.exists("ywstd.ixx"): os.remove("ywstd.ixx")
  if os.path.exists("ywstd.ifc") and os.path.exists("ywstd.obj"):
    print("ywstd compiled successfully.")
    sys.exit(0)
  else:
    print("Failed to compile ywstd.")
    sys.exit(1)
# Python code end */

#ifndef _M_X64
#error "ywstd requires x64 architecture."
#endif

#ifndef _WIN64
#error "ywstd requires Windows 64-bit."
#endif

#ifndef __cplusplus
#error "ywstd requires C++ compiler."
#endif

#ifndef ywstd_export
#define ywstd_export
#define ywstd_is_exported 0
#else
#define _BUILD_STD_MODULE
#define ywstd_is_exported 1
#endif

#include "abc.hpp"

#ifdef ywstd_import
#pragma comment(lib, "kernel32.lib")
#pragma comment(lib, "libcpmt.lib")
#pragma comment(lib, "user32.lib")
import ywstd;
#else

#include "cassert"
#include "cctype"
#include "cerrno"
#include "cfenv"
#include "cfloat"
#include "cinttypes"
#include "climits"
#include "clocale"
#include "cmath"
#include "csetjmp"
#include "csignal"
#include "cstdarg"
#include "cstddef"
#include "cstdint"
#include "cstdio"
#include "cstdlib"
#include "cstring"
#include "ctime"
#include "cuchar"
#include "cwchar"
#include "cwctype"

#include "algorithm"
#include "any"
#include "array"
#include "atomic"
#include "barrier"
#include "bit"
#include "bitset"
#include "charconv"
#include "chrono"
#include "compare"
#include "complex"
#include "concepts"
#include "condition_variable"
#include "coroutine"
#include "exception"
#include "execution"
#include "expected"
#include "filesystem"
#include "format"
#include "fstream"
#include "functional"
#include "future"
#include "initializer_list"
#include "iomanip"
#include "ios"
#include "iosfwd"
#include "iostream"
#include "istream"
#include "iterator"
#include "latch"
#include "limits"
#include "list"
#include "locale"
#include "map"
#include "mdspan"
#include "memory"
#include "memory_resource"
#include "mutex"
#include "new"
#include "numbers"
#include "numeric"
#include "optional"
#include "ostream"
#include "print"
#include "queue"
#include "random"
#include "ranges"
#include "ratio"
#include "regex"
#include "scoped_allocator"
#include "semaphore"
#include "set"
#include "shared_mutex"
#include "source_location"
#include "span"
#include "spanstream"
#include "sstream"
#include "stack"
#include "stacktrace"
#include "stdexcept"
#include "stdfloat"
#include "stop_token"
#include "streambuf"
#include "string"
#include "string_view"
#include "syncstream"
#include "system_error"
#include "thread"
#include "tuple"
#include "type_traits"
#include "typeindex"
#include "typeinfo"
#include "unordered_map"
#include "unordered_set"
#include "utility"
#include "valarray"
#include "variant"
#include "vector"

#include "xyz.hpp"

#endif
