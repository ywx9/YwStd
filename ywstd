#pragma once /* clang-format off */ /* Python code start
import os, sys, subprocess
if len(sys.argv) > 1 :
  cpp_file = sys.argv[1]
  if (os.path.splitext(cpp_file)[1] != ".cpp"):
    print("Usage: python ywstd [<cpp_file> [--run]]")
  if (not os.path.exists(cpp_file)):
    print(f"{cpp_file} not found:")
    sys.exit(1)
  exe_file = cpp_file.replace(".cpp", ".exe")
  obj_file = cpp_file.replace(".cpp", ".obj")
  if os.path.exists(exe_file): os.remove(exe_file)
  if os.path.exists(obj_file): os.remove(obj_file)
  args = ["bin\\cl", cpp_file, f"/Fe{exe_file}", f"/Fo{obj_file}", "/Dywstd_import", ]
  args+= ["/std:c++latest", "/EHsc", "/nologo", "/W4", "/O2", "/Qpar", "/utf-8", ]
  args+= ["/link", "ywstd.obj", "/LIBPATH:lib", ]
  subprocess.run(args)
  if os.path.exists(obj_file): os.remove(obj_file)
  if os.path.exists(exe_file):
    print(f"{exe_file} compiled successfully.")
    if "--run" in sys.argv:
      print(f"Running {exe_file}...")
      subprocess.run([exe_file])
    sys.exit(0)
  else:
    print(f"Failed to compile {cpp_file}.")
    sys.exit(1)
else:
  print("Compiling ywstd...")
  # create ywstd.ixx
  args = ["bin\\cl", "ywstd.ixx", "/c", "/Dywstd_export=export", ]
  args+= ["/std:c++latest", "/EHsc", "/nologo", "/W4", "/O2", "/Qpar", "/utf-8", ]
  if os.path.exists("ywstd.ifc"): os.remove("ywstd.ifc")
  if os.path.exists("ywstd.obj"): os.remove("ywstd.obj")
  with open("ywstd.ixx", "w") as f:
    f.write("export module ywstd;\n#include \"ywstd\"\n")
  subprocess.run(args)
  if os.path.exists("ywstd.ixx"): os.remove("ywstd.ixx")
  if os.path.exists("ywstd.ifc") and os.path.exists("ywstd.obj"):
    print("ywstd compiled successfully.")
    sys.exit(0)
  else:
    print("Failed to compile ywstd.")
    sys.exit(1)
# Python code end */

#define nat size_t
#define wchar wchar_t

#ifndef ywstd_export
#define ywstd_export
#define ywstd_is_exported 0
#else
#define _BUILD_STD_MODULE
#define ywstd_is_exported 1
#endif

#ifdef ywstd_import
#pragma comment(lib, "kernel32.lib")
#pragma comment(lib, "libcpmt.lib")
#pragma comment(lib, "user32.lib")
import ywstd;

#define ywstd_wide_(x) L ## x
#define ywstd_wide(x) ywstd_wide_(x)
#define ywstd_filew ywstd_wide(__FILE__)
#ifdef NDEBUG
#define assert(e) ((void)0)
#else
#define assert(e) (void)((!!(e)) || (::_wassert(L#e, ywstd_filew, unsigned(__LINE__)), 0))
#endif

#else
#include "cassert"
#include "cctype"
#include "cerrno"
#include "cfenv"
#include "cfloat"
#include "cinttypes"
#include "climits"
#include "clocale"
#include "csetjmp"
#include "csignal"
#include "cstdarg"
#include "cstddef"
#include "cstdint"
#include "cstdio"
#include "cstdlib"
#include "cstring"
#include "ctime"
#include "cuchar"
#include "cwchar"
#include "cwctype"
#include "algorithm"
#include "compare"
#include "concepts"
#include "iterator"
#include "type_traits"
#include "utility"
#endif
